@page "/customer"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3 class="mb-5">Customer</h3>

<button class="btn btn-primary mb-3" @onclick="Create">Create New Customer</button>

<table class="table table-responsive table-bordered">
    <thead>
        <tr>
            <th width="100">Id</th>
            <th width="200">Name</th>
            <th width="300">Address</th>
            <th width="100">Phone</th>
            <th width="100">Email</th>
            <th width="150">Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var customer in customers)
        {
            <tr>
                <td>@customer.Id</td>
                <td>@customer.Name</td>
                <td>@customer.Address</td>
                <td>@customer.Phone</td>
                <td>@customer.Email</td>
                <td>
                    <button class="btn btn-info" @onclick="() => Update(customer)">Update</button>
                    <button class="btn btn-danger" @onclick="() => Delete(customer)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<CustomerResponse> customers = [];

    protected override async Task OnInitializedAsync()
    {
        customers = await Http.GetFromJsonAsync<List<CustomerResponse>>("api/customers") ?? [];
    }

    private void Create()
    {
        NavigationManager.NavigateTo("customer/create");
    }

    private void Update(CustomerResponse customer)
    {
        NavigationManager.NavigateTo($"customer/update/{customer.Id}");
    }

    private async void Delete(CustomerResponse customer)
    {
        await Http.DeleteAsync($"api/customers/{customer.Id}");
        customers.Remove(customer);
        StateHasChanged();
    }
}
